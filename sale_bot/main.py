import logging
import time
import requests
from bs4 import BeautifulSoup
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, filters, CallbackContext
import threading
import random
import json
import os
from urllib.parse import urlparse, parse_qs
from textwrap import shorten
from telegram.error import TelegramError, TimedOut, Unauthorized, BadRequest
from datetime import datetime, timedelta
from telegram.ext import PreCheckoutQueryHandler
from telegram import ParseMode
from telegram import LabeledPrice

LINKS_FILE = 'user_links.json'

PAYMENT_REMINDER_FILE = "last_payment_reminder.txt"
PAYMENT_REMINDER_DAYS = 25

SEEN_FILE = 'seen_ads.json'
ACCESS_FILE = "user_access.json"
MAX_SEEN_PER_USER = 1000

ADMIN_FILE = "admin_ids.json"
ADMIN_IDS = []

def load_admin_ids():
    global ADMIN_IDS
    if not os.path.exists(ADMIN_FILE):
        with open(ADMIN_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)
        ADMIN_IDS = []
        return

    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as f:
            ADMIN_IDS = json.load(f)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è admin_ids.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é: {e}")
        ADMIN_IDS = []
        with open(ADMIN_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)


def save_admin_ids():
    with open(ADMIN_FILE, "w", encoding="utf-8") as f:
        json.dump(ADMIN_IDS, f)


TELEGRAM_TOKEN = '7748447384:AAGQLEPntaC55u_HyOJw20BNBNG0an_NISY'
PAYMENT_TOKEN = '390540012:LIVE:69831'  # —Ç–æ–∫–µ–Ω yookassa
CHECK_INTERVAL = 300  
CLEANUP_INTERVAL_DAYS = 1  
SEEN_ADS_MAX_AGE_DAYS = 30


user_links = {}  # {user_id: [url1, url2, ...]}
seen_ads = {}    # {user_id: {ad_id1, ad_id2, ...}}
user_states = {} # {user_id: state_string}
user_temp_data = {} # {user_id: {step_data}}
user_access = {}
link_balance = {}


avito_city_codes = {
    "–º–æ—Å–∫–≤–∞": "moskva",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "sankt-peterburg",
    "–∫–∞–∑–∞–Ω—å": "kazan",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekaterinburg",
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "nizhniy_novgorod",
    "—Å–∞–º–∞—Ä–∞": "samara",
    "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": "rostov-na-donu",
    "—á–µ–ª—è–±–∏–Ω—Å–∫": "chelyabinsk",
    "–æ–º—Å–∫": "omsk"
}


USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15",
    "Mozilla/5.0 (Linux; Android 11; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Mobile Safari/537.36"
]


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

LINK_EXPIRY_FILE = "link_expiry.json"
link_expiry = {}   

def load_link_expiry():
    global link_expiry
    if not os.path.exists(LINK_EXPIRY_FILE):
        with open(LINK_EXPIRY_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
        link_expiry = {}
        return

    try:
        with open(LINK_EXPIRY_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
            link_expiry = {int(k): v for k, v in raw.items()}
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è link_expiry.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é: {e}")
        link_expiry = {}
        with open(LINK_EXPIRY_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)

def save_link_expiry():
    with open(LINK_EXPIRY_FILE, "w", encoding="utf-8") as f:
        json.dump(link_expiry, f, ensure_ascii=False, indent=2)

def save_link_balance():
    with open("link_balance.json", "w") as f:
        json.dump(link_balance, f)

def load_link_balance():
    global link_balance
    if os.path.exists("link_balance.json"):
        with open("link_balance.json") as f:
            link_balance = {int(k): v for k, v in json.load(f).items()}

def load_user_links():
    global user_links
    if os.path.exists(LINKS_FILE):
        try:
            with open(LINKS_FILE, 'r', encoding='utf-8') as f:
                user_links = json.load(f)
                user_links = {int(k): v for k, v in user_links.items()}
                logging.info("‚úÖ user_links –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ user_links: {e}")

def save_user_links():
    try:
        with open(LINKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_links, f, ensure_ascii=False, indent=2)
        logging.info("üíæ user_links —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ user_links: {e}")

def save_user_access():
    with open(ACCESS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_access, f, ensure_ascii=False)

def load_user_access():
    global user_access
    if not os.path.exists(ACCESS_FILE):
        
        with open(ACCESS_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
        user_access = {}
        return

    try:
        with open(ACCESS_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
            user_access = {int(k): v for k, v in raw.items()}
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è user_access.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é: {e}")
        user_access = {}
        with open(ACCESS_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
            
def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("subscription_"):
        query.answer(ok=True)
    else:
        query.answer(ok=False, error_message="–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def load_seen_ads():
    global seen_ads
    if os.path.exists(SEEN_FILE):
        try:
            with open(SEEN_FILE, 'r', encoding='utf-8') as f:
                raw = json.load(f)
                seen_ads = {int(k): v for k, v in raw.items()}  # {user_id: {ad_id: date_str}}
                logging.info("‚úÖ seen_ads –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ seen_ads: {e}")

def save_seen_ads():
    try:
        with open(SEEN_FILE, 'w', encoding='utf-8') as f:
            json.dump(seen_ads, f, ensure_ascii=False, indent=2)
        logging.info("üíæ seen_ads —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ seen_ads: {e}")

def check_and_clean_user_links_if_too_large():
    max_size_mb = 100
    if os.path.exists(LINKS_FILE):
        size_mb = os.path.getsize(LINKS_FILE) / (1024 * 1024)
        if size_mb > max_size_mb:
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {LINKS_FILE} –ø—Ä–µ–≤—ã—à–∞–µ—Ç {max_size_mb} –ú–ë ({size_mb:.2f} –ú–ë). –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")


            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"user_links_backup_{timestamp}.json"
            try:
                with open(LINKS_FILE, 'r', encoding='utf-8') as original, \
                     open(backup_file, 'w', encoding='utf-8') as backup:
                    backup.write(original.read())
                logging.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {backup_file}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


            with open(LINKS_FILE, 'w', encoding='utf-8') as f:
                json.dump({}, f)
            global user_links
            user_links = {}
            logging.info("üßπ user_links –æ—á–∏—â–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–∞–º—è—Ç–∏.")

def grant_admin_access(update: Update, context: CallbackContext):
    requester_id = update.message.chat_id

    if requester_id not in ADMIN_IDS:
        update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_admin [user_id]")
        return

    try:
        target_id = int(args[0])
        if target_id not in ADMIN_IDS:
            ADMIN_IDS.append(target_id)
            save_admin_ids()
        user_access[target_id] = "2099-12-31"
        save_user_access()
        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def revoke_admin_access(update: Update, context: CallbackContext):
    requester_id = update.message.chat.id

    if requester_id not in ADMIN_IDS:
        update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_admin [user_id]")
        return

    try:
        target_id = int(args[0])

        if target_id == requester_id:
            update.message.reply_text("‚õî –ù–µ–ª—å–∑—è –æ—Ç–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        if target_id in ADMIN_IDS:
            ADMIN_IDS.remove(target_id)
            save_admin_ids()

        if target_id in user_access:
            del user_access[target_id]
            save_user_access()

        update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ—Ç–æ–∑–≤–∞–Ω—ã.")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def loop_notify_payment(bot: Bot, admin_id: int):
    while True:
        check_and_notify_payment(bot, admin_id)
        time.sleep(86400)  


def check_and_notify_payment(bot: Bot, admin_id: int):
    file_path = "last_payment_reminder.txt"


    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            try:
                last_sent = datetime.strptime(f.read().strip(), "%Y-%m-%d")
            except:
                last_sent = None
    else:
        last_sent = None

    now = datetime.now()

    if not last_sent or (now - last_sent).days >= 25:
        try:
            bot.send_message(chat_id=admin_id, text="üí≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä/—Ö–æ—Å—Ç–∏–Ω–≥.")
            with open(file_path, "w") as f:
                f.write(now.strftime("%Y-%m-%d"))
            logging.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ.")
        except Exception as e:
            logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")



def start_payment_period(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    options = {
        "üìÖ 1 –º–µ—Å—è—Ü ‚Äì 5000 ‚ÇΩ": (5000, 30),
        "üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äì 13990 ‚ÇΩ": (13990, 90),
        "üìÖ 12 –º–µ—Å—è—Ü–µ–≤ - 33333 ‚ÇΩ": (33333, 365)
    }

    if text not in options:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞.")
        return

    amount, days = options[text]
    context.user_data["payment_days"] = days

    context.bot.send_invoice(
        chat_id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {text}",
        description=f"–î–æ—Å—Ç—É–ø –Ω–∞ {days} –¥–Ω–µ–π",
        payload=f"subscription_{chat_id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {text}", amount * 100)],
        start_parameter="access-subscription"
    )

def successful_payment_callback(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    days = context.user_data.get("payment_days", 30)
    now = datetime.now()

    payload = update.message.successful_payment.invoice_payload

    if payload.startswith("link_slot_"):
        link_balance[user_id] = link_balance.get(user_id, 0) + 1
        save_link_balance()
        update.message.reply_text("‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.")
        return
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    current = user_access.get(user_id)
    if current:
        try:
            current_date = datetime.strptime(current, "%Y-%m-%d")
            if current_date > now:
                now = current_date
        except:
            pass

    until = now + timedelta(days=days)
    user_access[user_id] = until.strftime("%Y-%m-%d")
    save_user_access()

    update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {until.date()}")


def has_active_subscription(user_id):
    global ADMIN_IDS  
    if user_id in ADMIN_IDS:
        return True
    date_str = user_access.get(user_id)
    if not date_str:
        return False
    try:
        return datetime.strptime(date_str, "%Y-%m-%d") >= datetime.now()
    except:
        return False


def parse_avito(url, pages=3):
    session = requests.Session()
    session.headers.update({
        "User-Agent": random.choice(USER_AGENTS),
        "Referer": "https://www.avito.ru/"
    })
    
    ads = []
    for page in range(1, pages + 1):
        page_url = f"{url}&p={page}" if "?" in url else f"{url}?p={page}"
        try:
            response = session.get(page_url, timeout=10)
            logging.info(f"[Avito] {page_url} ‚Üí {response.status_code}")

            if response.status_code == 429:
                logging.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω HTTP 429 Too Many Requests. Avito –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã.")
                time.sleep(60)  
                break

            if response.status_code != 200:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {page_url}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                continue

            soup = BeautifulSoup(response.text, 'html.parser')

            for item in soup.select('[data-marker="item"]'):
                title_tag = item.select_one('[itemprop="name"]')
                link_tag = item.select_one('a')
                price_tag = item.select_one('[itemprop="price"]')
                image_tag = item.select_one('img')
                desc_tag = item.select_one('[data-marker="item-description"]')

                if not (title_tag and link_tag):
                    continue

                title = title_tag.text.strip()
                link = 'https://www.avito.ru' + link_tag['href']
                price = price_tag['content'] if price_tag else '0'
                image = image_tag['src'] if image_tag and image_tag.has_attr('src') else None
                desc = desc_tag.text.strip() if desc_tag else ''

                try:
                    price_int = int(price)
                except ValueError:
                    price_int = 0

                ad_id = link.split('_')[-1]

                ads.append({
                    'id': ad_id,
                    'title': title,
                    'link': link,
                    'price': price_int,
                    'image': image,
                    'desc': desc
                })
                
            time.sleep(random.uniform(1, 2.5))
            
        except requests.RequestException as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {page_url}: {e}")
    return ads



def check_ads(bot: Bot):
    import statistics

    while True:
        for user_id, links in user_links.items():

            
            is_subscribed = has_active_subscription(user_id)
            active_links = []

            
            if not is_subscribed:
                expiry_map = link_expiry.get(user_id, {})
                for url in links:
                    expiry_str = expiry_map.get(url)
                    if expiry_str:
                        try:
                            expiry_date = datetime.strptime(expiry_str, "%Y-%m-%d")
                            if expiry_date >= datetime.now():
                                active_links.append(url)
                            else:
                                logging.info(f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç—ë–∫: {url}")
                        except:
                            logging.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —É —Å—Å—ã–ª–∫–∏ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logging.info(f"‚è± –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ {url} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                active_links = links

            
            if not is_subscribed and not active_links:
                logging.info(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω.")
                continue

            for url in links:
                try:
                    ads = parse_avito(url)
                    all_prices = [ad['price'] for ad in ads if ad['price'] > 0]
                    median_price = statistics.median(all_prices) if all_prices else 0

                    if user_id not in seen_ads:
                        seen_ads[user_id] = set()

                    for ad in ads:
                        try:
                            parsed_url = urlparse(url)
                            params = parse_qs(parsed_url.query)

                            if 'price' in params:
                                price_range = params['price'][0].split('-')
                                if len(price_range) == 2:
                                    min_str, max_str = price_range
                                    min_price = int(min_str) if min_str.isdigit() else 0
                                    max_price = int(max_str) if max_str.isdigit() else 9999999

                                    if not (min_price <= ad['price'] <= max_price):
                                        continue
                        except Exception as e:
                            logging.warning(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")

                        if ad['id'] not in seen_ads.get(user_id, {}):
                            seen_ads.setdefault(user_id, {})[ad['id']] = datetime.now().strftime("%Y-%m-%d")

                            
                            if len(seen_ads[user_id]) > MAX_SEEN_PER_USER:
                                seen_ads[user_id] = set(list(seen_ads[user_id])[-MAX_SEEN_PER_USER // 2:])
                            save_seen_ads()

                            
                            if median_price > 0:
                                if ad['price'] < median_price * 0.7:
                                    label = "üü¢ –ù–∏–∂–µ —Ä—ã–Ω–∫–∞"
                                elif ad['price'] > median_price * 1.3:
                                    label = "üî¥ –í—ã—à–µ —Ä—ã–Ω–∫–∞"
                                else:
                                    label = "‚ö™ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞"
                            else:
                                label = "‚ö™ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞"

                            title = ad['title'][:100]
                            desc = ad['desc'][:300]
                            link = ad['link']
                            price = ad['price']

                            caption = (
                                f"üì¢ <b>{title}</b>\n"
                                f"üí∞ {price}‚ÇΩ {label}\n"
                                f"üìù {desc}...\n"
                                f"üîó {link}"
                            )

                            if len(caption) > 1024:
                                caption = caption[:1020] + "‚Ä¶"

                            image = ad.get('image')

                            try:
                                if image:
                                    bot.send_photo(chat_id=user_id, photo=image, caption=caption, parse_mode='HTML')
                                else:
                                    bot.send_message(chat_id=user_id, text=caption, parse_mode='HTML')
                            except Unauthorized:
                                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                            except TimedOut:
                                logging.warning(f"Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                            except BadRequest as e:
                                logging.error(f"BadRequest ({user_id}): {e}")
                            except TelegramError as e:
                                logging.error(f"TelegramError ({user_id}): {e}")

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        logging.info(f"üïí –ü–∞—É–∑–∞ {CHECK_INTERVAL} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        time.sleep(CHECK_INTERVAL)






def main_menu():
    return ReplyKeyboardMarkup([
        ["üîç –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä"],
        ["‚ûï –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Å—ã–ª–∫—É"],
        ["üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏", "üóë –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"]
    ], resize_keyboard=True)


def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id

    if has_active_subscription(user_id) or link_balance.get(user_id, 0) > 0:
        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Avito.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )
    else:
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Multi Poisk Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–µ—Ä–≤—ã–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Avito –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. "
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π.\n\n"
            "üöÄ –ß—Ç–æ —è —É–º–µ—é?\n"
            "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n"
            "‚úÖ –ì–∏–±–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã ‚Äî –∏—â–µ—à—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ? –ù–∞—Å—Ç—Ä–æ–π –ø–æ–∏—Å–∫ –ø–æ:\n"
            "   - –ö–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"iPhone 15\", \"–∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ\")\n"
            "   - –¶–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É (—É–∫–∞–∂–∏ min/max)\n"
            "   - –õ–æ–∫–∞—Ü–∏–∏ (–≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω)\n"
            "‚úÖ –£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî —Ñ–æ—Ç–æ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + —Å—Å—ã–ª–∫–∞.\n"
            "‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!\n\n"
            "üîç –ö–∞–∫ –Ω–∞—á–∞—Ç—å?\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏ ‚ûï ¬´–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä¬ª\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ü–µ–Ω—É, –≥–æ—Ä–æ–¥)\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —è —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É!\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            "üì± iPhone 15 Pro 256GB\n"
            "üí∞ 85 000 ‚ÇΩ\n"
            "üìç –ú–æ—Å–∫–≤–∞, –¶–ê–û\n"
            "üîó [–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Avito](https://www.avito.ru/...)\n"
            "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "---\n\n"
            "üíé –¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            "–° –Ω–∏–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ 7 —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –ª—é–±—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö Avito –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n"
            "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∞¬ª ‚Äî —Ç–∞–º –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –æ–ø–∏—Å–∞–Ω–æ!\n\n"
            "‚ö° –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—Å—Ç—Ä–æ–∏—à—å —Ñ–∏–ª—å—Ç—Ä—ã ‚Äî —Ç–µ–º —Ä–∞–Ω—å—à–µ –Ω–∞—á–Ω—ë—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n\n"
            "–ù–∞–∂–º–∏ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä¬ª –∏ –ø–æ–ø—Ä–æ–±—É–π!\n\n"
            "üì© –ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –Ω–∞–º ‚Äî –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!\n"
            "@Beshimov\n\n"
            "<b>üí≥ –¢–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            "üìÖ 1 –º–µ—Å—è—Ü ‚Äì 5000 ‚ÇΩ\n"
            "üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äì 13990 ‚ÇΩ\n"
            "üìÖ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äì 33333 ‚ÇΩ\n\n"
            "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∫—É–ø–∏—Ç—å 1 —Å–ª–æ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∑–∞ 1000 ‚ÇΩ/–º–µ—Å.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(
                [["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "üí≥ –ö—É–ø–∏—Ç—å 1 —Ñ–∏–ª—å—Ç—Ä"]],
                resize_keyboard=True
            )
        )


def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    state = user_states.get(user_id)
    temp = user_temp_data.setdefault(user_id, {})
    text = update.message.text.strip().lower()

    
    
    if text == "üí≥ –æ–ø–ª–∞—Ç–∏—Ç—å":
        plans = (
            "üìÜ <b>–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏</b>:\n"
            "<pre>–°—Ä–æ–∫       –¶–µ–Ω–∞</pre>\n"
            "<pre>1 –º–µ—Å—è—Ü    5000 ‚ÇΩ</pre>\n"
            "<pre>3 –º–µ—Å—è—Ü–∞   13990 ‚ÇΩ</pre>\n"
            "<pre>12 –º–µ—Å—è—Ü–µ–≤ 33333 ‚ÇΩ</pre>"
        )
        keyboard = ReplyKeyboardMarkup(
            [["üìÖ 1 –º–µ—Å—è—Ü ‚Äì 5000 ‚ÇΩ"], ["üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äì 13990 ‚ÇΩ"], ["üìÖ 12 –º–µ—Å—è—Ü–µ–≤ - 33333 ‚ÇΩ"]],
            resize_keyboard=True
        )
        update.message.reply_text(plans, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        return
    
    if text in ["üìÖ 1 –º–µ—Å—è—Ü ‚Äì 5000 ‚ÇΩ", "üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äì 13990 ‚ÇΩ", "üìÖ 12 –º–µ—Å—è—Ü–µ–≤ - 33333 ‚ÇΩ"]:
        return start_payment_period(update, context)
    
    if text == "üí≥ –∫—É–ø–∏—Ç—å 1 —Ñ–∏–ª—å—Ç—Ä":
        context.bot.send_invoice(
            chat_id=user_id,
            title="–ü–æ–∫—É–ø–∫–∞ —Å–ª–æ—Ç–∞",
            description="–û–ø–ª–∞—Ç–∞ 1 —Å–ª–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏",
            payload=f"link_slot_{user_id}",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=[LabeledPrice("–°–ª–æ—Ç", 100000)],
            start_parameter="buy-link-slot"
        )
        return

    
    if not has_active_subscription(user_id) and link_balance.get(user_id, 0) <= 0:
        update.message.reply_text(
            "üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "<b>üí≥ –¢–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            "üìÖ 1 –º–µ—Å—è—Ü ‚Äì 5000 ‚ÇΩ\n"
            "üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äì 13990 ‚ÇΩ\n"
            "üìÖ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äì 33333 ‚ÇΩ\n\n"
            "–ò–ª–∏ –∫—É–ø–∏—Ç–µ 1 —Ñ–∏–ª—å—Ç—Ä –∑–∞ 1000 ‚ÇΩ.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(
                [["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "üí≥ –ö—É–ø–∏—Ç—å 1 —Ñ–∏–ª—å—Ç—Ä"]],
                resize_keyboard=True
            )
        )
        return

    
    if state == 'deleting_link':
        links = user_links.get(user_id, [])
        if text.isdigit():
            idx = int(text) - 1
            if 0 <= idx < len(links):
                removed = links.pop(idx)
                save_user_links()
                update.message.reply_text(
                    f"üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n{removed}",
                    reply_markup=main_menu()
                )
                user_states[user_id] = None
                return
        update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏.",
            reply_markup=main_menu()
        )
        return

    
    if state == 'awaiting_city':
        if text == "–≤—Å—è —Ä–æ—Å—Å–∏—è":
            temp['city'] = ''
        elif text in avito_city_codes:
            temp['city'] = avito_city_codes[text]
        else:
            temp['city'] = text.replace(" ", "")
        user_states[user_id] = 'awaiting_query'
        update.message.reply_text("üîé –ß—Ç–æ –∏—â–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone 13)")
        return

    elif state == 'awaiting_query':
        temp['query'] = text
        user_states[user_id] = 'awaiting_min_price'
        update.message.reply_text("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞? (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏)")
        return

    elif state == 'awaiting_min_price':
        temp['price_min'] = text if text.isdigit() else ''
        user_states[user_id] = 'awaiting_max_price'
        update.message.reply_text("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞? (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏)")
        return

    elif state == 'awaiting_max_price':
        temp['price_max'] = text if text.isdigit() else ''
        city = temp.get('city')
        query = temp.get('query', '').replace(" ", "+")
        pmin = temp.get('price_min')
        pmax = temp.get('price_max')

        price_part = ''
        if pmin and pmax:
            price_part = f"&price={pmin}-{pmax}"
        elif pmin:
            price_part = f"&price={pmin}-"
        elif pmax:
            price_part = f"&price=0-{pmax}"

        url = f"https://www.avito.ru/{city}?q={query}{price_part}"
        user_links.setdefault(user_id, []).append(url)
        save_user_links()
        seen_ads.setdefault(user_id, set())

        display_url = url if city else f"https://www.avito.ru/rossiya?q={query}{price_part}"
        update.message.reply_text(
            f"‚úÖ –°—Å—ã–ª–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:\n{display_url}",
            reply_markup=main_menu()
        )
        user_states[user_id] = None
        user_temp_data[user_id] = {}
        return

    
    if state == 'waiting_for_link':
        if 'avito.ru' not in text:
            update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Avito. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        links = user_links.setdefault(user_id, [])
        if text in links:
            update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            return

        if len(links) >= 7:
            update.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 7 —Å—Å—ã–ª–æ–∫.")
            return

        links.append(text)
        save_user_links()

        if not has_active_subscription(user_id):
            link_balance[user_id] = link_balance.get(user_id, 1) - 1
            save_link_balance()

            
            expiry = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
            link_expiry.setdefault(user_id, {})[text] = expiry
            save_link_expiry()

        update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n{text}", reply_markup=main_menu())
        user_states[user_id] = None
        return

    
    if text == "‚ûï –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Å—ã–ª–∫—É":
        user_states[user_id] = 'waiting_for_link'
        update.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        return

    elif text == "üìã –º–æ–∏ —Å—Å—ã–ª–∫–∏":
        links = user_links.get(user_id, [])
        if links:
            msg = "üîó –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join(f"{i}. {l}" for i, l in enumerate(links, 1))
            msg += "\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É, –Ω–∞–∂–º–∏—Ç–µ üóë –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É."
            if not has_active_subscription(user_id):
                balance = link_balance.get(user_id, 0)
                msg += f"\n\nüí≥ –°–ª–æ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {balance}"
            update.message.reply_text(msg, reply_markup=main_menu())
        else:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫.", reply_markup=main_menu())
        return

    elif text == "üóë —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É":
        links = user_links.get(user_id, [])
        if not links:
            update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
        else:
            user_states[user_id] = 'deleting_link'
            link_list = '\n'.join(f"{i+1}. {l}" for i, l in enumerate(links))
            update.message.reply_text(
                f"üóë –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:\n{link_list}",
                reply_markup=main_menu()
            )
        return

    elif text == "üîç –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä":
        user_states[user_id] = 'awaiting_city'
        user_temp_data[user_id] = {}
        update.message.reply_text(
            "üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≤—Å—è –†–æ—Å—Å–∏—è'"
        )
        return

    
    update.message.reply_text(
        "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. üòä",
        reply_markup=main_menu()
    )

def auto_cleanup():
    while True:
        now = datetime.now()

        
        cutoff = now - timedelta(days=30)
        removed_count = 0

        for user_id, ad_map in seen_ads.items():
            new_ads = {
                ad_id: date for ad_id, date in ad_map.items()
                if datetime.strptime(date, "%Y-%m-%d") >= cutoff
            }
            removed_count += len(ad_map) - len(new_ads)
            seen_ads[user_id] = new_ads

        if removed_count:
            save_seen_ads()
            logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ seen_ads.json")

    
        for user_id, url_map in link_expiry.items():
            user_links_list = user_links.get(int(user_id), [])
            to_delete = []

            for url, expiry_str in url_map.items():
                try:
                    expiry_date = datetime.strptime(expiry_str, "%Y-%m-%d")
                    if expiry_date < now and not has_active_subscription(int(user_id)):
                        to_delete.append(url)
                except:
                    continue

            for url in to_delete:
                if url in user_links_list:
                    user_links_list.remove(url)
                del url_map[url]

            if to_delete:
                logging.info(f"üóë –£–¥–∞–ª–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(to_delete)}")

        save_link_expiry()
        save_user_links()

        time.sleep(CLEANUP_INTERVAL_DAYS * 86400)  # —Ä–∞–∑ –≤ –¥–µ–Ω—å




def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("revoke_admin", revoke_admin_access))
    dp.add_handler(CommandHandler("grant_admin", grant_admin_access))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(MessageHandler(Filters.regex("^üìÖ "), start_payment_period))
    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))

    threading.Thread(target=auto_cleanup, daemon=True).start()
    threading.Thread(target=loop_notify_payment, args=(updater.bot, 5016274966), daemon=True).start()
    thread = threading.Thread(target=check_ads, args=(updater.bot,), daemon=True)
    thread.start()

    check_and_notify_payment(updater.bot, admin_id=5016274966)

    check_and_clean_user_links_if_too_large()
    load_link_balance()
    load_admin_ids()
    load_link_expiry()
    load_user_access()
    load_user_links()
    load_seen_ads()

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
